package kr.or.ddit.controller.member;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.InvocationTargetException;
import java.util.UUID;

import javax.servlet.ServletException;
import javax.servlet.annotation.MultipartConfig;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.http.Part;

import org.apache.commons.beanutils.BeanUtils;

import kr.or.ddit.service.member.IMemberService;
import kr.or.ddit.service.member.MemberServiceImpl;
import kr.or.ddit.vo.MemberVO;

/**
 * Servlet implementation class UpdateMember
 */
@WebServlet("/updateMember.do")
@MultipartConfig(
		fileSizeThreshold = 1024 * 1024 * 50,		//	10mb 로 설정하고 싶을 때
		maxFileSize       = 1024 * 1024 * 50,
		maxRequestSize    = 1024 * 1024 * 100
		)
public class UpdateMember extends HttpServlet {
	private static final long serialVersionUID = 1L;
    

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		request.setCharacterEncoding("utf-8");
		String mem_id = request.getParameter("mem_id");
		MemberVO memberVo = new MemberVO();
		
		try {
			BeanUtils.populate(memberVo, request.getParameterMap());
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		}
		
		
//		이미지 등록을 위한 추가처리
		Part part = request.getPart("mem_img");
		String fileName = extractFileName(part);
		String uploadPath = "D:/A_TeachingMaterial/03_HighJava/workspace/ProjectDHA/WebContent/images/member";
	
		if(part.getSize() < 1) {
			memberVo.setMem_img(null);
		} else {
//			File 객체 생성 및 경로 없을 시 생성
			File file = new File(uploadPath);
			if(!file.exists()) file.mkdirs();
			
			String imgPath = UUID.randomUUID().toString() + "_" + fileName;
			
			memberVo.setMem_img(imgPath);
			
			
			try {
				part.write(uploadPath + File.separator + imgPath);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	
		memberVo.setMem_id(mem_id);
			
		// 서비스 객체 연결하기
		IMemberService service = MemberServiceImpl.getInstance();
		
		// 쿼리문 실행하기 insert는 성공시 1, 실패시 0 반환이기 때문에 int type으로 변수설정
		// insertMember메서드에 회원가입에 기입했던 내용들을 memberVo에 넣어서 파라미터로 보낸다.
		int cnt = service.updateMember(memberVo);
	
		HttpSession session = request.getSession();
		
		// 세션처리
		if(memberVo != null) {
			// 로그인 성공 - session에 정보를 저장
			session.setAttribute("loginok", memberVo);
			session.setAttribute("check", "true");
		} 
		
		if(cnt > 0) {
			
			
			request.getRequestDispatcher("member/mypageMember2.jsp").forward(request, response);
		} else {
			
			
			response.sendRedirect("member/UpdateMember.jsp");
			
		}
	
		
						
	}
	

	private String extractFileName(Part part) {
		String fileName = "";
		
		//	헤더의 키 값이 'content-disposition' 인 헤더의 Value 값 구하기
		String headerValue = part.getHeader("content-disposition");
		String[] itemArr = headerValue.split(";");
		
		for(String item : itemArr) {
			if(item.trim().startsWith("filename")) {		//	'filename' 찾기 
				fileName = item.substring(item.indexOf("=")+2, item.length()-1);
			}
		}
		return fileName;
	}
		
}


