package kr.or.ddit.controller.notice;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.UUID;

import javax.servlet.ServletException;
import javax.servlet.annotation.MultipartConfig;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Part;

import org.apache.commons.beanutils.BeanUtils;

import kr.or.ddit.service.notice.INoticeService;
import kr.or.ddit.service.notice.NoticeServiceImpl;
import kr.or.ddit.vo.NoticeVO;

/**
 * Servlet implementation class BoardInsert
 */
@WebServlet("/noticeInsert.do")
@MultipartConfig(
		fileSizeThreshold = 1024 * 1024 * 50, // 10mb 로 설정하고 싶을 때
		maxFileSize = 1024 * 1024 * 50, 
		maxRequestSize = 1024 * 1024 * 100)

public class NoticeInsert extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doPost(request,response);
	}
	
	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// 받아오는 데이터 인코딩
		request.setCharacterEncoding("utf-8");
		// 가져온 데이터를 담을 VO객체
		NoticeVO noticeVo = new NoticeVO();

		  try {
			   BeanUtils.populate(noticeVo, request.getParameterMap());
		  } catch (IllegalAccessException e) {
			  e.printStackTrace();
		  } catch (InvocationTargetException e) {
			  e.printStackTrace();
		  }
		   System.out.println(noticeVo+"DADJKDAFHL");
			/*
			 * //이미지 등록을 위한 추가처리 Part part = request.getPart("board_img"); String fileName =
			 * extractFileName(part); String uploadPath =
			 * "D:/A_TeachingMaterial/03_HighJava/workspace/ProjectDHA/WebContent/images/notice";
			 * 
			 * if(part.getSize() < 1) { boardVo.setNotice_img(null); } else { // File 객체 생성 및
			 * 경로 없을 시 생성 File file = new File(uploadPath); if(!file.exists())
			 * file.mkdirs();
			 * 
			 * String imgPath = UUID.randomUUID().toString() + "_" + fileName;
			 * 
			 * boardVo.setNotice_img(imgPath);
			 * 
			 * try { part.write(uploadPath + File.separator + imgPath); } catch (Exception
			 * e) { e.printStackTrace(); } }
			 */

		// 서비스 객체 얻기
		INoticeService service = NoticeServiceImpl.getInstance();
		// 서비스 메소드 호출 -결과값 가져오기
		service.insertNotice(noticeVo);
		

		
		// 결과값을 request에 저장
		
		// view페이지로 이동
		request.getRequestDispatcher("/noticeList.do").forward(request, response);
	}

	
	/*
	 * private String extractFileName(Part part) { String fileName = "";
	 * 
	 * // 헤더의 키 값이 'content-disposition' 인 헤더의 Value 값 구하기 String headerValue =
	 * part.getHeader("content-disposition"); String[] itemArr =
	 * headerValue.split(";");
	 * 
	 * for(String item : itemArr) { if(item.trim().startsWith("filename")) { //
	 * 'filename' 찾기 fileName = item.substring(item.indexOf("=")+2,
	 * item.length()-1); } } return fileName; }
	 */

}
