package kr.or.ddit.dao.board;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSession;

import kr.or.ddit.util.MybatisUtil;
import kr.or.ddit.vo.BoardVO;

public class BoardDaoImpl implements IBoardDao {
	
	private static BoardDaoImpl dao;

	private BoardDaoImpl() {
	}

	public static BoardDaoImpl getInstance() {
		if (dao == null) {
			dao = new BoardDaoImpl();
		}
		return dao;
	}


	@Override
	public List<BoardVO> boardPrintAll() {
		SqlSession session = null;
		List<BoardVO> boardList = new ArrayList<BoardVO>();
		try {
			session= MybatisUtil.getSqlSession();
			boardList = session.selectList("board.boardPrintAll");
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			session.close();
		}
		return boardList;
	}

	@Override
	public int insertBoard(BoardVO boardVo) {
		SqlSession session = null;
		int cnt = 0;
		try {
			session = MybatisUtil.getSqlSession();
			cnt = session.insert("board.insertBoard",boardVo);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if(session!=null) { 
				session.commit();}
				session.close();
		}
		
		return cnt;
	}

	@Override
	public int updateBoard(BoardVO boardVo) {
		SqlSession session = null;
		int cnt = 0;
		try {
			session = MybatisUtil.getSqlSession();
			cnt = session.update("board.updateBoard",boardVo);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if(session!=null) { 
				session.commit();}
				session.close();
		}
		return cnt;
	}

	@Override
	public int deleteBoard(int board_no) {
		SqlSession session = null;
		int cnt = 0;
		try {
			session = MybatisUtil.getSqlSession();
			cnt = session.delete("board.deleteBoard",board_no);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if(session!=null) { 
				session.commit();}
				session.close();
		}
		return cnt;
	}

	@Override
	public List<BoardVO> searchBoardbyTitle(String board_title) {
		SqlSession session = null;
		List<BoardVO> boardList = new ArrayList<BoardVO>();
		try {
			session= MybatisUtil.getSqlSession();

			boardList = session.selectList("board.searchBoardbyTitle",board_title);

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
				session.close();
		}
		return boardList;
	}

	@Override
	public List<BoardVO> searchBoardbyId(String mem_id) {
		SqlSession session = null;
		List<BoardVO> boardList = new ArrayList<BoardVO>();
		try {
			session= MybatisUtil.getSqlSession();
			boardList = session.selectList("board.searchBoardbyId",mem_id);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
				session.close();
		}
		return boardList;
	}

	@Override
	public BoardVO viewBoard(int board_no) {
		SqlSession session = null;
		//	게시글 정보를 담을 BoardVO 객체 생성
		BoardVO board = new BoardVO();
		
		try {
			session = MybatisUtil.getSqlSession();
			board = session.selectOne("board.viewBoard", board_no);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
				session.close();
		}
		
		return board;
	}

	@Override
	public int viewUpdate(int board_no) {
		SqlSession session = null;
		int cnt = 0;
		try {
			session = MybatisUtil.getSqlSession();
			cnt = session.update("board.viewUpdate",board_no);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if(session!=null) { 
				session.commit();}
				session.close();
		}
		return cnt;
	}

	@Override
	public List<BoardVO> selectByPage(Map<String, Object> map) {
		SqlSession session = null;
		List<BoardVO> list = new ArrayList<BoardVO>();
		try {
			session = MybatisUtil.getSqlSession();
			list = session.selectList("board.selectByPage", map);
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			session.commit();
			session.close();
		}
		
		return list;
	}

	@Override
	public int getTotalCount(Map<String, Object> map) {
		SqlSession session = null;
		int res = 0;
		try {
			session = MybatisUtil.getSqlSession();
			res=session.selectOne("board.getTotalCount",map);
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			session.commit();
			session.close();
		}
				
		return res;
	}

}
